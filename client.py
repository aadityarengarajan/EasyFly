'''
"EasyFly" Project by Aaditya Rengarajan
Contact Developer at aadit.xo@gmail.com
or at http://aadityarengarajan.vercel.app/

Open-Source Software. Documented for all viewers.

Aviation Discord Client with multiple features.

Open-Source Software under the Boost Software License 1.0.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
'''

#/*  importing necessary modules */

#/- requests to contact API

import requests

#/- traceback to return errors

import traceback

#/- discord and related modules
import discord
from discord.ext import commands,tasks

#/- importing custom modules

from modules.index import *
from modules.logs import logs
import modules.aircraft

#/- datetime module for live date and time

import datetime

#/- asyncio to asynchronously change client status

import asyncio

#/- importing os to control output console window

import os

#/- JSON to parse airlines database

import json

#/- creating PDF OFP Document

from pdfkit import from_url as HTMLToPDF


# /* creating the discord client */

client = commands.Bot(command_prefix=['>','//'])

# /* removing the help command as we have a custon help command */

client.remove_command('help')

# /* declaring the
#        - discord client token which will be obtained from environment variables 
#        - discord client version */

token = 'ODMxNjA4MDUyMDEyMDIzODM5.YHXtWg.yBFqZ4y127PdBEfIk0Own131vcg' # os.getenv("EASYFLY_CLIENT_TOKEN")
CLIENT_VERSION = 'build-0406-202106-3209-27-oss'

# /* creating a list of authorized developers to report logs to,
#    a list of Discord IDs of users */

AUTHORIZED_DEVELOPERS_LIST = ["829140024976867379"]




# /* asynchronously updating status */

@tasks.loop()
async def status_task():

    #/- creating a list of servers the client is in

    guildlist = []

    async for guild in client.fetch_guilds(limit=150):
        guildlist.append((guild.name))

    status1 = (f' {len(guildlist)} Servers')

    #/- "Watching __ Servers"

    tv = discord.Activity(type=discord.ActivityType.watching, name=f'{status1}')

    status2 = 'UNICOM'

    #/- "Listening to UNICOM"

    music = discord.Activity(type=discord.ActivityType.listening, name=f'{status2}')

    #/- "Playing >help"

    game = discord.Game(">help")

    #/- updating status at intervals
    ''' The main difference is that time.sleep(5) is blocking, and asyncio.sleep(5) is non-blocking.

    When time.sleep(5) is called, it will block the entire execution of the script and it will be put on hold,
    just frozen, doing nothing.

    But when you call await asyncio.sleep(5), it will ask the event loop to run something else while
    the await statement finishes its execution.'''
    
    await client.change_presence(status=discord.Status.online, activity=game)
    await asyncio.sleep(30)
    await client.change_presence(status=discord.Status.online, activity=tv)
    await asyncio.sleep(15)
    await client.change_presence(status=discord.Status.online, activity=music)
    await asyncio.sleep(8)




# /*  reporting discord client ready */
@client.event
async def on_ready():

    game = discord.Game(">help")
    await client.change_presence(status=discord.Status.online, activity=game)

    #/- starting the asynchronous status Thread

    status_task.start()

    #/- reporting client initialized

    print('''
███████╗ █████╗ ███████╗██╗   ██╗███████╗██╗  ██╗   ██╗                                               
██╔════╝██╔══██╗██╔════╝╚██╗ ██╔╝██╔════╝██║  ╚██╗ ██╔╝                                               
█████╗  ███████║███████╗ ╚████╔╝ █████╗  ██║   ╚████╔╝                                                
██╔══╝  ██╔══██║╚════██║  ╚██╔╝  ██╔══╝  ██║    ╚██╔╝                                                 
███████╗██║  ██║███████║   ██║   ██║     ███████╗██║                                                  
╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝     ╚══════╝╚═╝                                                  
                                                                                                      
██████╗ ██╗███████╗ ██████╗ ██████╗ ██████╗ ██████╗      ██████╗██╗     ██╗███████╗███╗   ██╗████████╗
██╔══██╗██║██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝
██║  ██║██║███████╗██║     ██║   ██║██████╔╝██║  ██║    ██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   
██║  ██║██║╚════██║██║     ██║   ██║██╔══██╗██║  ██║    ██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   
██████╔╝██║███████║╚██████╗╚██████╔╝██║  ██║██████╔╝    ╚██████╗███████╗██║███████╗██║ ╚████║   ██║   
╚═════╝ ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝      ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   
                                                                                                      
██╗███╗   ██╗██╗████████╗██╗ █████╗ ██╗     ██╗███████╗███████╗██████╗                                
██║████╗  ██║██║╚══██╔══╝██║██╔══██╗██║     ██║╚══███╔╝██╔════╝██╔══██╗                               
██║██╔██╗ ██║██║   ██║   ██║███████║██║     ██║  ███╔╝ █████╗  ██║  ██║                               
██║██║╚██╗██║██║   ██║   ██║██╔══██║██║     ██║ ███╔╝  ██╔══╝  ██║  ██║                               
██║██║ ╚████║██║   ██║   ██║██║  ██║███████╗██║███████╗███████╗██████╔╝                               
╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝   ╚═╝╚═╝  ╚═╝╚══════╝╚═╝╚══════╝╚══════╝╚═════╝                                
                                                                                                      ''')




# /* back up command [AUTHORIZED DEVELOPER'S ONLY] */

@client.command()
async def devbackup(ctx,member : discord.Member):

    #/- this command sends the EasyFly logs to a
    #/- mentioned user. can only be invoked by an
    #/- authorized developer

    author = ctx.message.author

    if str(author.id) in AUTHORIZED_DEVELOPERS_LIST:

        #/- confirming the invoker is verified

        #/- logging the action into the logs file

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} requested developer backup data for {member.name}, data was given\n')

        logsfile = discord.File("easyfly.log", filename=datetime.datetime.now().strftime("logs(%d-%m-%Y %H:%M:%S).log"))
        embed = discord.Embed(
        colour = discord.Colour.dark_blue()
        )
        embed.set_author(name=f"Logs Data Base File")
        await member.send(embed=embed)
        await member.send(file=logsfile)

        #/- reporting job complete on channel

        await ctx.send(f"```Back Up Complete. Version : {CLIENT_VERSION}```")

    else:

        #/- raising an intruder warning

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} requested developer backup data for {member.name}, but was unauthorized\n')
        await ctx.send(f"Hey {author.name}, sorry but this is only for authorized developers to backup data.")




# /* command to list all the servers the client is in */

@client.command()
async def listguilds(ctx):

    author = ctx.message.author

    if str(author.id) in AUTHORIZED_DEVELOPERS_LIST:

        #/- confirming the member is verified

        #/- logging the action into the logs file

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} requested the list of servers for EasyFly Discord Client, data was given\n')

        guilds = []

        guildobjects = client.guilds

        for guild in guildobjects:

            owner = await client.fetch_user(guild.owner_id)

            embed=discord.Embed(title=guild.name, description=str("**Owner : "+owner.name+"**"))
            embed.set_thumbnail(url=f"https://cdn.discordapp.com/icons/{guild.id}/{guild.icon}.png")
            roles = []
            for role in guild.me.roles:
                roles.append(str(role))
            embed.add_field(name=f"Members : {guild.member_count}", value=f"Joined : {guild.me.joined_at}", inline=False)
            embed.add_field(name=f"Nickname : {guild.me.display_name}", value=f"Roles : {', '.join(roles)}", inline=False)
            guilds.append(embed)

        #/- sending the list of guilds to the member

        for embed in guilds:
            await author.send(embed=embed)

        #/- reporting job complete on channel

        await ctx.send(f"```Report Complete. Version : {CLIENT_VERSION}```")

    else:

        #/- raising an intruder warning

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} requested the list of servers for EasyFly Discord Client, but was unauthorized\n')
        await ctx.send(f"Hey {author.name}, sorry but this is only for authorized developers to know the list of servers EasyFly Discord Client is in.")




# /* command to see bot's statistics */

@client.command()
async def statistics(ctx):

    author = ctx.message.author

    #/- logging the action into the logs file

    logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} requested client statistics, data was given\n')

    users = 0
    guilds = 0

    guildobjects = client.guilds

    for guild in guildobjects:

        users += int(guild.member_count)
        guilds += 1

    with open("easyfly.log") as f:

        usage = len(f.readlines())

    embed=discord.Embed(title="EasyFly Discord Client", description="Usage Statistics")
    embed.set_thumbnail(url="https://media.discordapp.net/attachments/841871977047392266/841872094982701086/white-gradient.png?width=683&height=683")
    embed.add_field(name="Number of Servers", value=str(guilds), inline=True)
    embed.add_field(name="Number of Users", value=str(users), inline=True)
    embed.set_footer(text="EasyFly Discord Bot developed by Aaditya Rengarajan. Contact Aaditya Rengarajan on discord at @arular#2514")
    await ctx.send(embed=embed)

    #/- sending the list of guilds to the member

    for embed in guilds:
        await ctx.send(embed=embed)




# /* command for flight planning */

@client.command()
async def plan(ctx):

    #/- flight planning module, creates a flight plan
    #   and flight briefing within discord for a given user

    #/- clearing any old dispatch documents

    try:
        os.remove("data/dispatch.pdf")
    except:
        pass

    def check(msg):

        #/- required function to check for input
        #   from invoking user

        return msg.author == ctx.author and msg.channel == ctx.channel

    member = ctx.author

    #/- logging the action into the logs file

    logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{member.name} called the >fpl command.\n')

    #/- requesting for variables to create flight plan

    embed=discord.Embed(title="Enter Departure ICAO and Arrival ICAO (separated by '/')", description="Example : OKBK/VOMM")
    await ctx.send(embed=embed)
    input_one = await client.wait_for("message", check=check)
    frm = input_one.content.split("/")[0].replace("/","")
    try:

        #/- confirming that the airport is not non-existent

        country = requests.get(f"https://charts.api.navigraph.com/1/airports/{frm}").json()["country_name"]

    except:

        #/- ending the process in case of invalid airport

        embed=discord.Embed(title="Invalid Departure ICAO!", description="Such an ICAO does not exist! Please check List of Airports by ICAO Code by clicking the Error Title.", url="https://en.wikipedia.org/wiki/List_of_airports_by_IATA_and_ICAO_code",color=discord.Colour.red())
        await ctx.send(embed=embed)

        return None

    to = input_one.content.split("/")[1].replace("/","")

    try:

        #/- confirming that the airport is not non-existent

        country = requests.get(f"https://charts.api.navigraph.com/1/airports/{to}").json()["country_name"]
    except:

        #/- ending the process in case of invalid airport

        embed=discord.Embed(title="Invalid Arrival ICAO!", description="Such an ICAO does not exist! Please check List of Airports by ICAO Code by clicking the Error Title.", url="https://en.wikipedia.org/wiki/List_of_airports_by_IATA_and_ICAO_code",color=discord.Colour.red())
        await ctx.send(embed=embed)

        return None

    embed=discord.Embed(title="Enter Callsign and Aircraft Type (separated by '/')", description="Example : KAC343/B77W")
    embed.set_footer(text="Please use ICAO Standard Codes - refer to : https://www.icao.int/publications/doc8643/pages/search.aspx")
    await ctx.send(embed=embed)
    input_two = await client.wait_for("message", check=check)
    callsign = input_two.content.split("/")[0].replace("/","")

    #/- assuming average cruising speed/TAS as
    #   490 knots

    kts = "490"
    
    aircraft = input_two.content.split("/")[1].replace("/","")

    #/- checking if aircraft code is valid

    if modules.aircraft.check(str(aircraft.upper())) == False:

        #/- ending the process in case of invalid airport

        embed=discord.Embed(title="Invalid Aircraft!", description="Such an Aircraft does not exist in the list of aircrafts approved by ICAO! Please check List of Aircrafts by ICAO Code by clicking the Error Title.", url="https://www.icao.int/publications/doc8643/pages/search.aspx",color=discord.Colour.red())
        await ctx.send(embed=embed)

        return None

    embed=discord.Embed(title="Enter Custom Remarks", description="Example : Vande Bharat Mission")
    embed.set_footer(text="If you have no custom remarks, enter 'XXX'.")
    await ctx.send(embed=embed)
    rem = await client.wait_for("message", check=check)
    rem = rem.content

    if rem.upper() == "XXX":
        rem = ""

    pic = member.nick
    if str(pic).upper()=="NONE":
        pic = member.name

    message = await ctx.send(f"Standby as we create a flight plan. Please allow upto 1 minute as we generate the OFP too :grin:")

    #/- trying to get wake turbulence category
    #   of aircraft in case known

    waketurbcatdict = ({
    'B748': 'H',
    'B744': 'H',
    'B77W': 'H',
    'B77L': 'H',
    'A35K': 'H',
    'B773': 'H',
    'MD11': 'H',
    'A359': 'H',
    'B764': 'H',
    'B763': 'H',
    'B753': 'M',
    'B752': 'M',
    'B739': 'M',
    'B738': 'M',
    'B737': 'M',
    'B734': 'M',
    'B736': 'M',
    'BCS3': 'M',
    'B733': 'M',
    'B735': 'M',
    'BCS1': 'M',
    'B748': 'H',
    'F100': 'M',
    'DC6': 'M',
    'SB20': 'M',
    'E50P': 'L',
    'A388':'J'
    })

    #/- assuming aircraft as Medium in case unknown

    waketurbcat = 'M'

    try:
        waketurbcat = waketurbcatdict[aircraft]
    except:
        pass

    deptapt = frm
    arrapt = to

    #/- initializing variable for error generation

    error = ''

    #/- creating a flight plan
    #   sample return : [Flight Route (str),Flight Plan Details (str),
    #   Flight Route Briefing (str),ICAO Style Flight Plan (str),Loadsheet (str),
    #   "plandetails" from API Server (list)]

    #/- "plandetails" is a list containing [Flight Route (str),Flight Plan Details (str),
    #    Flight Route Briefing (str),Loadsheet (str),EasyFly OFP Database ID (str),Altitude(str)]

    fpl = fplgenner(frm=frm, to=to, callsign = callsign, flight = aircraft, pic=pic, rmk=rem)

    #/- initializing variables for internal-use

    rte = fpl[0]
    dbcode = fpl[-1][-2]
    alt = fpl[-1][-1]

    try:

        #/- getting cost index from loadsheet

        if fpl[4]!='UNAVAILABLE':
            fuels=fpl[4].split('<br>')
            for i in fuels:
                if 'TAKE OFF FUEL' in i:
                    tof = i.replace('TAKE OFF FUEL','').strip()
                    tof = float(tof)*0.45359237
                    tof = str(tof)
                    tof = str(round(float(tof),2))
                if 'TIME TO EMPTY' in i:
                    for j in i.split('   '):
                        if 'TIME TO EMPTY' in j:
                            endurance = j.replace('TIME TO EMPTY','').strip()
                        if 'CI' in j:
                            ci = j.replace('CI','').strip()

        else:
            tof = 'UNAVAILABLE'
            ci = 'AUTO COST INDEX'
            endurance = 'UNAVAILABLE'

        #/- calculating time of flight using standard
        #   time = distance/speed formula

        distance=((getdist(deptapt,arrapt)))
        distancenm=round((distance/1.852),2)    
        time = float(distancenm)/float(kts)

        #/- 'atsfpl' is the ICAO format flight plan

        atsfpl = fpl[3]

        #/- trying to fetch weather reports of airports

        try:

            #/- METARs

            deptmetar = getmetar(str(deptapt))
            arrmetar = getmetar(str(arrapt))

            #/- airport full names, example "VOMM" =>  "Chennai International Airport"

            deptaptname = str(aptname(deptapt)[0])
            arraptname = str(aptname(arrapt)[0])

            #/- TAFs

            depttaf = taf(str(deptapt).upper())
            arrtaf = taf(str(arrapt).upper())

            #/- decoding METARs

            deptmetardec = metar(str(deptmetar))
            arrmetardec = metar(str(arrmetar))

        except:

            #/- creating error string to report error

            error = 'the weather reports could not be fetched.'

        #/- reporting useable runways based on wind conditions

        deptrwys = str(f"Available runways at {deptapt} for departure are {(',').join(actrwy(deptapt))}")

        arrrwys = str(f"Available runways at {arrapt} for arrival are {(',').join(actrwy(arrapt))}")

        #/- trying to get airline logo
        #/- and airline name, and IATA code

        airline = "UNKNOWN"
        logo = "UNKNOWN"
        with open("data/airlines.json") as f:
            for dictionary in json.load(f)["results"]:
                if str(dictionary['ICAO']).upper().replace(' ','') == callsign[0:3]:
                    airline = dictionary["Airline Name"]
                    iata = dictionary["IATA"]
                    logo = f"http://pics.avs.io/500/500/{iata}.png"

        IATACODEOFAIRLINE = "UNKNOWN"

        if airline != "UNKNOWN":
            IATACODEOFAIRLINE = iata

        if airline == "UNKNOWN":

            #/- in case of unknown airline company
            #   using phonetic callsign "MMV02" => "Mike Mike Victor 02"

            airline = ""
            for i in str(callsign[0:3]):
                airline += phonetic(i)
                airline += ' '

        #/- fullname of airline operation

        fullcallsign = airline + ' ' + callsign[3:]

        #/- flight briefing embed        

        brief = f'''**CALLSIGN** : {fullcallsign}
    **SCHEDULED TIME OF DEPARTURE (LOCAL)** : {((datetime.datetime.now())).strftime("%Y/%m/%d  %H:%M")}
    **DISTANCE** : {distancenm} NAUTICAL MILES
    **FLIGHT DURATION** : {str(round(float(time),2))} HOURS
    **CRUISE SPEED** : {kts} KNOTS
    **CRUISE ALTITUDE** : {alt}
    **ROUTE** : {rte.replace('<b>','**').replace('</b>','**')}
    **TAKE OFF FUEL** : {tof} KGS
    **ENDURANCE** : {endurance}
    **COST INDEX** : {ci}
    **REMARKS** : {rem}
    '''

        #/- URL to airport NOTAMs

        dnot = f"https://www.notams.faa.gov/dinsQueryWeb/queryRetrievalMapAction.do?reportType=Report&retrieveLocId={str(deptapt)}&actionType=notamRetrievalByICAOs&submit=View+NOTAMs"
        anot = f"https://www.notams.faa.gov/dinsQueryWeb/queryRetrievalMapAction.do?reportType=Report&retrieveLocId={str(arrapt)}&actionType=notamRetrievalByICAOs&submit=View+NOTAMs"

        #/- weather embeds

        dweatherdet = f'''
    DEPARTURE AIRPORT : {deptaptname} ({deptapt})
    METAR AT DEPARTURE AIRPORT : {deptmetar}
    TAF AT DEPARTURE AIRPORT : {depttaf}
    DECODED METAR AT DEPARTURE AIRPORT :-

    {deptmetardec}

    {deptrwys}

    '''
        aweatherdet = f'''
    ARRIVAL AIRPORT : {arraptname} ({arrapt})
    METAR AT ARRIVAL AIRPORT : {arrmetar}
    TAF AT ARRIVAL AIRPORT : {arrtaf}
    DECODED TAF AT ARRIVAL AIRPORT :-

    {arrmetardec}

    {arrrwys}

    '''
        
        #/- guide text to use ICAO format flight plan

        ats=f'''

    To pre-file on your network, if it supports the ICAO format, paste this ICAO Flight Plan :

    '''

        #/- ICAO format flight plan as embed

        embed = discord.Embed(
            colour = discord.Colour.blue()
            )

        embed.set_author(name="FPL MESSAGE FOR ATS (X.400 AMHS)")

        formatted_atsfpl = str((atsfpl.strip()).replace('-'.join(atsfpl.split("-")[-3:]),"").replace(" ","").replace("\n","") + '-'.join(atsfpl.split("-")[-3:])).replace("\n",'')
        formatted_atsfpl = str(formatted_atsfpl.split("IS-")[0]
                                                     +"IS\n-"
                                        +formatted_atsfpl.split("IS-")[1].split("LB1")[0]
                                                     +"LB1\n"
                                        +formatted_atsfpl.split("LB1")[1].replace("-","\n-")).replace("\n\n","\n")

        embed.add_field(name=f"{callsign}", value=str(formatted_atsfpl), inline=False)

        #/- prefile links for IVAO, VATSIM, POSCON, PilotEdge

        from datetime import datetime as dt

        endurance = '{:02d}{:02d}'.format(*divmod(int((float(round(float(time),2))+2)*60), 60))

        vatsprefile=str(f'''https://my.vatsim.net/pilots/flightplan?
raw={atsfpl}
fuel_time={endurance}
speed=459
altitude={str(alt.replace('FL',''))}00'''.replace('\n','').replace(' ','%20'))

        posconprefile = f'''https://hq.poscon.net/flightplan/create?flightRules=I&
callsign={str(callsign)}&
isRegistration=N&
flightType=S&
numOfAircraft=1&
aircraftType={str(aircraft)}&
wakeTurbulence={str(waketurbcat)}&
equipmentCode=S%2CD%2CE1%2CE2%2CE3%2CF%2CG%2CH%2CI%2CJ2%2CJ3%2CJ4%2CJ5%2CM1%2CR%2CW%2CX%2CY&
ssr=L%2CB1%2CD1&
departureApt={str(deptapt)}&
dateOfFlight={str(dt.now().strftime('%y%m%d'))}&
depTime={str(dt.now().strftime('%H%M'))}&
speed=N0{str(kts)}&
cruiseAlt=F{str(alt.replace('FL',''))}&
route={str(fpl[0])}&
destinationApt={str(arrapt)}&
ete={'{:02d}{:02d}'.format(*divmod(int((float(round(float(time),2)))*60), 60))}&
firstAlt=&
secondAlt=&
status=&
pbn=A1%2CB1%2CC1%2CD1%2CL1%2CO1%2CS2&
performanceCat=D&
otherInformation=PBN%2FA1B1C1D1O1S1+RMK%2FTCAS {rem} GENERATED BY EASYFLY FOR SIMULATION ONLY&
endurance={'{:02d}{:02d}'.format(*divmod(int((float(round(float(time),2))+2)*60), 60))}&
numOnBoard=1&
emergencyRadio=&
waterEquipment=&
remarks=TCAS GENERATED BY EASYFLY FOR SIMULATION ONLY'''.replace('\n','').replace(' ','%20')

        pilotedgeprefile = f'''https://www.pilotedge.net/pilot_tools/file?flightplan[type]=IFR&
flightplan[aircraft_identification]={str(callsign)}&
flightplan[aircraft_type]={str(aircraft)}&
flightplan[aircraft_equipment]={str(waketurbcat)}&
flightplan[heavy]=1&
flightplan[airspeed]={str(kts)}&
flightplan[departing_airport]={str(deptapt)}&
flightplan[arriving_airport]={str(arrapt)}&
flightplan[altitude]={str(alt.replace('FL',''))}00&
flightplan[alternate_airport]=&
flightplan[route]={str(fpl[0])}
flightplan[remarks]=RMK/TCAS {rem} GENERATED BY EASYFLY FOR SIMULATION ONLY'''.replace('\n','').replace(' ','%20')

        #/- IVAO pre-file only supports POST requests by native, so we use
        #   a custom API to create a GET request URL with query strings which will
        #   be automatically converted to POST

        ivaoprefile = f'''http://api.intellx.co.in/ivao?
2={str(callsign)}&
3={str(aircraft)}%2F{str(waketurbcat)}&
4={str(kts)}&
5={str(deptapt)}&
6={str(dt.now().strftime('%H%M'))}&
7={str(alt.replace('FL',''))}00&
8={str(fpl[0])}&
9={str(arrapt)}&
10a={'{:02d}.{:02d}'.format(*divmod(int((float(round(float(time),2)))*60), 60)).split('.')[0]}&
10b={'{:02d}.{:02d}'.format(*divmod(int((float(round(float(time),2)))*60), 60)).split('.')[-1]}&
11=PBN%2FA1B1C1D1O1S1+RMK%2FTCAS DOF/{str(dt.now().strftime('%y%m%d'))} {rem} GENERATED BY EASYFLY FOR SIMULATION ONLY&
14={str(pic)}+&voice=%2FV%2F'''.replace('\n','').replace(' ','%20')

        #/- embed for prefile links

        prefilesembed = discord.Embed(
            title = '',
            color = discord.Colour.teal()
            )

        prefilesembed.add_field(name=f"Prefile", value=f'''**[IVAO]({ivaoprefile})**''', inline=True)
        prefilesembed.add_field(name=f"Prefile", value=f'''**[VATSIM]({vatsprefile})**''', inline=True)
        prefilesembed.add_field(name=f"Prefile", value=f'''**[POSCON]({posconprefile})**''', inline=True)
        prefilesembed.add_field(name=f"Prefile", value=f'''**[PilotEdge]({pilotedgeprefile})**''', inline=True)

        #/- embed for flight briefing

        briefembed = discord.Embed(
            colour = discord.Colour.gold()
            )

        briefembed.set_author(name="Flight Details")
        briefembed.add_field(name=f"{callsign}", value=str(brief), inline=False)

        #/- attempting to set embed thumbnails as URLs to airline logo

        if IATACODEOFAIRLINE == "UNKNOWN":
            pass
        else:
            logo = f"http://pics.avs.io/500/500/{IATACODEOFAIRLINE}.png"
            briefembed.set_thumbnail(url = logo)

        briefembed.set_image(url=f"http://www.gcmap.com/map?P={deptapt}-{arrapt}&MS=wls&MR=300&MX=720x360&PM=*")

        #/- embed for weather details

        
        weatherembed = discord.Embed(
            colour = discord.Colour.gold()
            )

        weatherembed.set_author(name="Weather Details")

        weatherembed.add_field(name=f"Departure Airport", value=(str(dweatherdet)[0:1000]), inline=False)
        weatherembed.add_field(name=f"Arrival Airport", value=(str(aweatherdet)[0:1000]), inline=False)

        #/- embed for link to "Pilot Essential Documents"/OFP, from
        #   EasyFly API

        ofpembedsd = discord.Embed(
                colour = discord.Colour.from_rgb(0, 70, 130))

        ofpembedsd.add_field(name=f"OFP + Route Map", value=f"**[Pilot Essential Documents](https://ofp.intellx.co.in/ofp/documents?fpl={atsfpl}&dbcode={dbcode})**", inline=False)

        #/- flight briefing as PDF

        make_pdf = HTMLToPDF(
            f'http://ofp.intellx.co.in/rendered?fpl={atsfpl}&dbcode={dbcode}',
            'data/dispatch.pdf',
        )
        dispatchpdf = discord.File("data/dispatch.pdf", filename=f'DISPATCH-EASYFLY_{callsign}_{deptapt}{arrapt}_{str(dt.now().strftime("%y%m%d"))}-INTELLX.pdf')

        #/- sendinf the flight plan briefing

        await member.send(f'''



**⟹⟹⟹ FLIGHT PLAN FOR {fullcallsign.upper()} ⟸⟸⟸**

Hello {pic},

Here's your flight briefing for today : -
''')

        #/- logging the action into the logs file

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{member.name} generated a flight plan\n')
        logs(atsfpl)
        logs('\n')

        #/- embed for exporting flight plans
        #/- powered by flightplandatabase

        exportembed = discord.Embed(
            title = 'Export Flight Route'
            )

        exportembed.add_field(name=f"Export", value=f'''**[JSON](http://ofp.intellx.co.in/export/{dbcode}/json)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[XML](http://ofp.intellx.co.in/export/{dbcode}/xml)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[CSV](http://ofp.intellx.co.in/export/{dbcode}/csv)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[PDF](http://ofp.intellx.co.in/export/{dbcode}/pdf)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[KML](http://ofp.intellx.co.in/export/{dbcode}/kml)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[X-Plane](http://ofp.intellx.co.in/export/{dbcode}/xplane)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[X-Plane 11](http://ofp.intellx.co.in/export/{dbcode}/xplane11)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[FS9](http://ofp.intellx.co.in/export/{dbcode}/fs9)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[FSX](http://ofp.intellx.co.in/export/{dbcode}/fsx)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[Squawkbox](http://ofp.intellx.co.in/export/{dbcode}/squawkbox)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[X-FMC](http://ofp.intellx.co.in/export/{dbcode}/xfmc)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[PMDG](http://ofp.intellx.co.in/export/{dbcode}/pmdg)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[Airbus-X](http://ofp.intellx.co.in/export/{dbcode}/airbusx)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[Quality Wings](http://ofp.intellx.co.in/export/{dbcode}/qualitywings)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[iFly 747](http://ofp.intellx.co.in/export/{dbcode}/ifly747)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[Flight Gear](http://ofp.intellx.co.in/export/{dbcode}/flightgear)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[TFDi 747](http://ofp.intellx.co.in/export/{dbcode}/tfdi747)**''', inline=True)
        exportembed.add_field(name=f"Export", value=f'''**[Infinite Flight](http://ofp.intellx.co.in/export/{dbcode}/infiniteflight)**''', inline=True)

        #/- send briefing to user

        try:
            await member.send(embed=briefembed)
        except:

            #/- send briefing as message in
            #   case it is too long

            await member.send(brief)

        #/- send weather briefing to user

        await member.send(embed=weatherembed)

        #/- send ICAO X.400AMHS ATS authorized FPL guideline text to user

        await member.send(ats)

        #/- send ICAO X.400AMHS ATS authorized FPL to user

        await member.send(embed=embed)

        #/- inform completion of process on channel

        await ctx.send(f"Captain {pic}, your flight briefing has been sent to you.")

        #/- try to delete loading message

        try:
            await message.delete()
        except:
            pass

        #/- send exporting embed

        await member.send(embed=exportembed)


        #/- try to send prefile links

        try:
            await member.send(embed=prefilesembed)
            await member.send(embed=ofpembedsd)
            await member.send(f'Be it a group flight or personal, prefile it on your favorite networks by clicking the links above :upside_down:')

            await member.send(file=dispatchpdf)

            await member.send(f'\nHave a great flight captain {pic}!\nGood Day!')
        except:
            try:

                #/- trying the same process twice to ignore
                #   any errors on Discord's side

                await member.send(embed=prefilesembed)
                await member.send(embed=ofpembedsd)
                await member.send(f'Be it a group flight or personal, prefile it on your favorite networks by clicking the links above :upside_down:')

                await member.send(file=dispatchpdf)

                await member.send(f'\nHave a great flight captain {pic}!\nGood Day!')

            except Exception:

                #/- only possible expected exception is if
                #   the link is too long to fit in an embed

                await member.send(file=dispatchpdf)

                await member.send(f'Have a great flight captain {pic}!\nGood Day!')
                await ctx.send(f"Sorry Captain {pic}, we faced an error while generating your pre-file links. Perhaps your flight plan was too long.\nHowever, your flight briefing and plan was sent to you on PMs, enjoy your flight captain, Good Day!")

    except Exception:

        #/- in case of any exception
        #   mention the error

        error_message = traceback.format_exc()
        error_message = f"This may be relevant information when you contact the developer : \n\n {error_message}"
        if error!='':
            error = f"Sorry {pic}, we're afraid that "+error+" Try once again (*verify your format*), and if the error still persists, report to the developer (**>help** to know how to contact the dev :wink:)"
        else:
            error = f"Sorry {pic}, we're afraid that we faced an error during the process. Try once again (*verify your format*), and if the error still persists, report to the developer (**>help** to know how to contact the dev :wink:)"
        embed = discord.Embed(
            colour = discord.Colour.red()
            )

        embed.set_author(name="AN ERROR OCCURED")
        for i in error_message.split('\n'):
            for j in i.split(','):
                if 'line' in j:
                    errorno = (j.replace('line',''))

        embed.add_field(name=f"ERROR '{errorno}'", value=str(error_message), inline=False)

        #/- log the error into the logs file

        logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{member.name} faced an error while generating a flight plan\n')
        logs(str(error_message.replace('This may be relevant information when you contact the developer : \n\n ','')))
        await member.send(f"Sorry Captain {pic}, we faced an error during processing.",embed=embed)

        await ctx.send(error)




# /* custom help command */

@client.command()
async def help(ctx):

    #/- logging the action into the logs file

    author = ctx.message.author

    logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} called the >help command.\n')

    #/- creating help embed

    embed=discord.Embed(title="Commands", description="Command Prefixes : `>`, `//`", color=0x6c1aa2)
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/841871977047392266/841872094982701086/white-gradient.png")
    embed.set_author(name="EasyFly", url="http://easyfly.vercel.app/")
    embed.add_field(name="plan", value="Creates a Flight Plan given 2 Airports, Callsign, Aircraft Type, and Custom Remarks", inline=True)
    embed.add_field(name="help", value="Gives a List of Available Commands with EasyFly", inline=True)
    embed.add_field(name="links", value="Links to Invite the EasyFly Discord Client to your server, join support server, or donate.", inline=True)
    embed.add_field(name="rwy", value="Gives active Runway at a given ICAO.", inline=True)
    embed.add_field(name="notams", value="PMs you a list of important NOTAMs (only IMPORTANT NOTAMs filtered by EasyFly) given ICAO.", inline=True)
    embed.add_field(name="wxr", value="Gives METAR, Decoded METAR and TAF given ICAO.", inline=True)
    embed.add_field(name="vatsim", value="Gives Live VATSIM ATC given ICAO of Airport to search.", inline=True)
    embed.add_field(name="ivao", value="Gives Live IVAO ATC given ICAO of Airport to search.", inline=True)
    embed.add_field(name="pilotedge", value="Gives Live PilotEdge ATC given ICAO of Airport to search.", inline=True)
    embed.add_field(name="live", value="Gives Live ATC from IVAO, PilotEdge, VATSIM given ICAO of Airport to search.", inline=True)
    embed.add_field(name="track", value="Tracks a flight given callsign across IVAO, VATSIM, PilotEdge.", inline=True)
    embed.add_field(name="charts", value="Gives Airport Charts/AIP as published by DGCA, Only for India :flag_in: .", inline=True)
    embed.add_field(name="apt", value="Returns details of given airport ICAO such as Latitude and Longitude, Airport Type, Country, Available Fuel, Repairs, and so on.", inline=True)
    embed.add_field(name="version", value="Gives Version of the EasyFly Discord Client.", inline=True)
    embed.add_field(name="statistics", value="Sends EasyFly Discord Client Statistics.", inline=True)
    embed.add_field(name="devbackup", value="Back Up data for Authorized Developers.", inline=True)
    embed.add_field(name="listguilds", value="List of Servers the bot is in for Authorized Developers.", inline=True)
    embed.set_footer(text="EasyFly Discord Client developed by Aaditya Rengarajan. Contact Aaditya Rengarajan on discord at @arular#2514")

    #/- sending the help embed to the user

    await ctx.send(embed=embed)




# /* command for EasyFly Discord Client links */

@client.command()
async def links(ctx):

    #/- logging the action into the logs file

    author = ctx.message.author
    logs(f'\n[{datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}] @{author.name} called the >links command.\n')

    #/- creating the links embed

    embed = discord.Embed(
            title = '',
            color = discord.Colour.blue()
            )
    embed.add_field(name=f"Invite Bot to Server", value=f'''**[Add to your Discord Server](https://discord.com/api/oauth2/authorize?client_id=742079271853359145&permissions=134219776&scope=bot)**''', inline=False)
    embed.add_field(name=f"Join Our Discord Server for Assistance/Support", value=f'''**[Join our Support Server](http://discord.gg/ukK39Egpwk)**''', inline=False)
    embed.add_field(name=f"Support the Developer by Donating", value=f'''**[Donate](http://easyfly.intellx.co.in/donate)**''', inline=False)
    embed.add_field(name=f"Check The Official EasyFly Website", value=f'''**[EasyFly](http://easyfly.intellx.co.in/)**''', inline=False)

    #/- sending the links embed to the user

    await ctx.send(embed = embed)




# /* command to determine active runway */

@client.command()
async def rwy(ctx,*,icao):
    author = ctx.message.author
    icao = icao.upper()

    try:

        #/- confirming that the airport is not non-existent

        country = requests.get(f"https://charts.api.navigraph.com/1/airports/{icao}").json()["country_name"]
    except:

        #/- ending the process in case of invalid airport

        embed=discord.Embed(title="Invalid ICAO!", description="Such an ICAO does not exist! Please check List of Airports by ICAO Code by clicking the Error Title.", url="https://en.wikipedia.org/wiki/List_of_airports_by_IATA_and_ICAO_code",color=discord.Colour.red())
        await ctx.send(embed=embed)

        return None

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for {icao}'s active runway(s)\n")

    #/- sending the active runways of the airport

    await ctx.send(f"Based on wind conditions, available RWYs for use at {icao} are {(',').join(actrwy(icao))}")




# /* command to see important notams given ICAO */

@client.command()
async def notams(ctx,*,icao):

    #/- inform that process of fetching NOTAMs has started
    #   so as to justify any waiting time

    await ctx.send("Fetching Latest NOTAMs from FAA.")
    author = ctx.message.author
    member = ctx.author

    #/- get the upper case of the ICAO to eliminate
    #   any human case error

    icao = icao.upper()

    # try:

        #/- attempt to fetch the NOTAMs

    impnots = IMPnotams(icao)
    if len(impnots)>=1:
        await member.send(f"**⟹⟹⟹ NOTAMS FOR {icao} ⟸⟸⟸**")
        for notamm in impnots:
            embed=discord.Embed(title=str(notamm.split(" - ")[0]).strip(), description=str(notamm.split(" - ")[-1]).split("UNTIL")[0].strip())
            untilstring = str(str("UNTIL "+str(notamm.split(" - ")[-1]).split("UNTIL")[-1].strip())).replace(".","").strip()
            embed.set_footer(text=untilstring)
            await member.send(embed=embed)
        await ctx.send("Sent it to your PMs :wink:")
    else:
        await ctx.send(f"No Important NOTAMs at {icao}, you're good to go! :wink:")

    #/- logging the action into the log file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for {icao}'s important NOTAMs\n")

    # except:

    #     #/- report error in case of any exceptions
    #     #   only expected error is an invalid ICAO code

    #     logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for {icao}'s important NOTAMs, failed.\n")
    #     await ctx.send(":flushed: Failed to fetch NOTAMS!! Perhaps an invalid ICAO? :thinking: Try Again... ")




# /* command to fetch weather details given ICAO code */

@client.command()
async def wxr(ctx,*,icao):
    author = ctx.message.author
    member = ctx.author
    icao = icao.upper()

    try:

        #/- try to fetch METAR, TAF, and parse METAR

        metarembed = discord.Embed(title=f"{icao.upper()} METAR",description=getmetar(icao),colour = discord.Colour.from_rgb(28, 138, 114))
        decodembed = discord.Embed(title="Decoded METAR",description=metar(getmetar(icao)),colour = discord.Colour.from_rgb(27, 80, 133))
        tafembed = discord.Embed(title=f"{icao.upper()} TAF",description=taf(icao),colour = discord.Colour.from_rgb(71, 27, 133))

        await ctx.send(embed=metarembed)
        await ctx.send(embed=decodembed)
        await ctx.send(embed=tafembed)

        #/- logging the actions into the logs file

        logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for {icao}'s important NOTAMs\n")

    except:

        #/- report error in case of any exceptions
        #   only expected error is an invalid ICAO code

        logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for {icao}'s important NOTAMs, failed.\n")

        await ctx.send(":flushed: Failed to fetch Weather Details!! Perhaps an invalid ICAO? :thinking: Try Again... ")




# /* track live VATSIM ATC */

@client.command()
async def vatsim(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = str(icao).upper()
    now_ates = live_VATSIM(icao)

    #/- filter live VATSIM stats to required ICAO only

    for station in now_ates:
        stationembed = discord.Embed(title=str(f'{station["callsign"]} ({station["frequency"]} MHz)'),description=str(station["text_atis"]),color=0x24a9d6)
        await ctx.send(embed=stationembed)

    if len(now_ates)==0:
        await ctx.send(f"Woops! No Stations online at {icao} on VATSIM currently.")

    #/- logging the action into the log file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for stations online on VATSIM at {icao}.\n")




# /* track live IVAO ATC */

@client.command()
async def ivao(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = str(icao).upper()
    now_ates = live_IVAO(icao)

    #/- filter live IVAO stats to required ICAO only

    for station in now_ates:
        stationembed = discord.Embed(title=str(f'{station["callsign"]} ({station["frequency"]} MHz)'),description=str(station["text_atis"]),color=0x004cff)
        await ctx.send(embed=stationembed)

    if len(now_ates)==0:
        await ctx.send(f"Woops! No Stations online at {icao} on IVAO currently.")

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for stations online on IVAO at {icao}.\n")




# /* track live PilotEdge ATC */

@client.command()
async def pilotedge(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = str(icao).upper()
    now_ates = live_PilotEdge(icao)

    #/- filter live PilotEdge stats to required ICAO only

    for station in now_ates:
        stationembed = discord.Embed(title=str(f'{station["callsign"]} ({station["frequency"]} MHz)'),description=str(station["text_atis"]),color=0xff9500)
        await ctx.send(embed=stationembed)

    if len(now_ates)==0:
        await ctx.send(f"Woops! No Stations online at {icao} on IVAO, VATSIM or PilotEdge currently.")

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for stations online on VATSIM at {icao}.\n")




# /* track live ATC across all 3 networks */

@client.command()
async def live(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = str(icao).upper()
    now_ates = live_all(icao)

    #/- filter live stats to required ICAO only

    for station in now_ates:
        stationembed = discord.Embed(title=str(f'{station["callsign"]} ({station["frequency"]} MHz)'),description=str(station["text_atis"]),color=0x6c1aa2)
        stationembed.set_footer(text=str(station["network"]))
        await ctx.send(embed=stationembed)

    if len(now_ates)==0:
        await ctx.send(f"Woops! No Stations online at {icao} at VATSIM, IVAO or PilotEdge currently.")

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for stations online on VATSIM, IVAO or PilotEdge at {icao}.\n")




# /* track live flights across all 3 networks */

@client.command()
async def track(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = str(icao).upper()

    message = await ctx.send(f"Fetching results for {icao} from IVAO, VATSIM and PilotEdge :mag:")

    #/- found flag to report in case not found

    FOUND_FLIGHT = False

    #/- a list of posted flights to prevent repitition

    POSTED = []

    for flight in live_all_flights():

        if (flight.get("callsign") == icao) == True and\
           (flight.get("network") not in POSTED) == True:

            #/- report found

            FOUND_FLIGHT = True

            #/- try to get IATA callsign to get logo and airline name

            AIRLINE_NAME = "UNKNOWN"

            with open("data/airlines.json") as f:
                for dictionary in json.load(f)["results"]:

                    #/- uncomment statement for debugging

                    #/*print(str(dictionary['ICAO']).upper().replace(' ',''), flight.get("callsign")[0:3],str(dictionary['ICAO']).upper().replace(' ','') == flight.get("callsign")[0:3])

                    if str(dictionary['ICAO']).upper().replace(' ','') == flight.get("callsign")[0:3]:

                        #/- uncomment statement for debugging

                        #/*print(str(dictionary['ICAO']).upper().replace(' ',''), flight.get("callsign")[0:3],str(dictionary['ICAO']).upper().replace(' ','') == flight.get("callsign")[0:3])

                        #/- uncomment statement for debugging

                        #/*print(dictionary)

                        #/- setting airline logo as thumbnail

                        IATA_THUMBNAIL = f'http://pics.avs.io/500/500/{dictionary["IATA"]}.png'

                        #/- adding airline name for callsign

                        AIRLINE_NAME = dictionary["Airline Name"]


            #/- creating embed

            embed=discord.Embed(title=flight.get("name"), description=f"**Network** : {flight['network']}", color=0x6c1aa2)

            #/- setting airiline logo as thumbnail

            try:
                embed.set_thumbnail(url=IATA_THUMBNAIL)
            except:
                pass

            if AIRLINE_NAME == "UNKNOWN":

                #/- in case of unknown airline company
                #   using phonetic callsign "MMV02" => "Mike Mike Victor 02"

                AIRLINE_NAME = ""
                for i in str(callsign[0:3]):
                    AIRLINE_NAME += phonetic(i)
                    AIRLINE_NAME += ' '

            #/- fullname of airline operation

            fullcallsign = AIRLINE_NAME + ' ' + flight.get("callsign")[3:]
            embed.set_author(name=fullcallsign)

            #/- key names vary from network to network

            try:
                departure = flight["departure airport"]
            except:
                departure = flight["flight_plan"]["departure"]

            embed.add_field(name="From", value=f"{aptname(departure)[0]} ({departure})", inline=False)

            #/- key names vary from network to network

            try:
                arrival = flight["destination"]
            except:
                arrival = flight["flight_plan"]["arrival"]

            embed.add_field(name="To", value=f"{aptname(arrival)[0]} ({arrival})", inline=False)

            embed.add_field(name="Groundspeed", value=str(flight.get("groundspeed")), inline=True)
            embed.add_field(name="Altitude", value=f"{flight.get('altitude')} ft", inline=True)

            #/- key names vary from network to network

            if flight["network"] == "VATSIM":
                embed.add_field(name="CID", value=str(flight.get("cid")), inline=True)

            elif flight["network"] == "IVAO":
                embed.add_field(name="VID", value=str(flight.get("vid")), inline=True)

            else:
                embed.add_field(name="ID", value=str(flight.get("id")), inline=True)

            embed.add_field(name="Server", value=flight.get("server"), inline=True)

            closest = closestapt(flight["latitude"],flight["longitude"])

            embed.add_field(name="Nearest Airport", value=f"{aptname(closest)[0]} ({closest})", inline=True)

            distance = round(float(distapt(arrival.upper(),flight["latitude"],flight["longitude"])),2)

            embed.add_field(name="Distance to Destination", value=f"{distance} nm", inline=True)

            #/- converting mach, kilometres per hour, knots into knots
            #   for time calculation

            if "M" in flight["filed cruise speed"]:
                speed = float(flight["filed cruise speed"][-3:-1])*666.739
            elif "K" in flight["filed cruise speed"]:
                speed = float(flight["filed cruise speed"].replace("K",""))/1.852
            else:
                speed = float(flight["filed cruise speed"].replace("N",""))

            if int(speed) == 0:

                #/- assuming average speed if
                #   speed is not filed

                speed = 490

            time = float(distance)/float(speed)

            #/- formatting calculated time as HH:MM

            time = '{0:02.0f}:{1:02.0f}'.format(*divmod(time * 60, 60))

            embed.add_field(name="Arriving In", value=f"{time} Hrs", inline=True)

            embed.add_field(name="Transponder", value=str("`"+f'{int(flight["squawk code"]):4d}'.replace(" ","0")+"`"), inline=True)

            #/- key names vary from network to network

            if flight["network"] == "VATSIM":
                try:
                    embed.add_field(name="Route", value=str(flight.get("flight_plan").get("route")), inline=True)
                except:
                    pass

            elif flight["network"] == "IVAO":
                embed.add_field(name="Route", value=str(flight.get("13")), inline=True)

            #/- try to delete the "Fetching..." message

            try:
                await message.delete()
            except:
                pass

            #/- route is not available in PilotEdge

            await ctx.send(embed=embed)

    if FOUND_FLIGHT != True:

        #/- try to delete the "Fetching..." message

        try:
            await message.delete()
        except:
            pass

        await ctx.send(f"{icao} was not found :pleading_face: :weary:")

    

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for live flight status of {icao}.\n")




# /* fetch charts for indian airprots */

@client.command()
async def charts(ctx,*,icao):
    author = ctx.message.author
    member = ctx.author
    icao = icao.upper()

    #/- confirming that the requested ICAO is indian

    country = requests.get(f"https://charts.api.navigraph.com/1/airports/{icao}").json()["country_name"]

    if country=="India":

        finalchartlink = getCharts(icao)
        if finalchartlink!="0":

            #/- in case the chart link is not unavailable, that is, != unavailable
            #   but since "0" is the unavailable response from EasyFly API,
            #   we use !="0"

            embed = discord.Embed(title=f"{icao} Charts  :flag_in:", url=str(finalchartlink),color=discord.Colour.from_rgb(244, 149, 48))
            await ctx.send(embed=embed)
        else:
            await ctx.send("Apologies, charts are only available for Indian Airports (:flag_in:).")

    else:
        await ctx.send("Apologies, charts are only available for Indian Airports (:flag_in:).")

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for charts for {icao}.\n")




# /* airport information from Navigraph by Jeppessen by Boeing's API

@client.command()
async def apt(ctx,*,icao):

    author = ctx.message.author
    member = ctx.author
    icao = icao.upper()

    try:

        airportdetails = requests.get(f"https://charts.api.navigraph.com/1/airports/{icao}").json()

        #/- using REST Countries API for country details

        countrydetails = requests.get(f"https://restcountries.eu/rest/v2/alpha/{airportdetails['country_code']}").json()

        languages = []
        for i in countrydetails["languages"]:
            languages.append(f"{i['name']} ({i['nativeName']})")
        codes = []
        for i in countrydetails["callingCodes"]:
            codes.append(f"+{i}")
        currencies = []
        for i in countrydetails["currencies"]:
            currencies.append(f"{i['name']} [{i['code']}] ({i['symbol']})")

        embed=discord.Embed(title=f"{airportdetails['name'].capitalize()} Briefing", color=discord.Color.dark_blue())
        embed.set_thumbnail(url=str(countrydetails["flag"]))
        embed.add_field(name="ICAO", value=str(airportdetails["icao_airport_identifier"]), inline=True)
        embed.add_field(name="IATA", value=str(airportdetails["iata_airport_designator"]), inline=True)
        embed.add_field(name="Latitude", value=str(airportdetails["latitude"]), inline=True)
        embed.add_field(name="Longitude", value=str(airportdetails["longitude"]), inline=True)
        embed.add_field(name="Airport Type", value=str(airportdetails["airport_type"]), inline=True)
        embed.add_field(name="Country", value=countrydetails["name"], inline=True)
        embed.add_field(name="Flag", value=f':flag_{countrydetails["alpha2Code"].lower()}:', inline=True)
        embed.add_field(name="Calling Code(s)", value=', '.join(codes), inline=True)
        embed.add_field(name="Time Zone(s)", value=', '.join(countrydetails["timezones"]), inline=True)
        embed.add_field(name="Currency(s)", value=', '.join(currencies), inline=True)
        embed.add_field(name="Magnetic Variation", value=str(airportdetails["magnetic_variation"]), inline=True)
        embed.add_field(name="Fuel Available", value=str(', '.join(airportdetails["fuel_types"])), inline=True)
        embed.add_field(name="Oxygen", value=str('/'.join(airportdetails["oxygen"])), inline=True)
        embed.add_field(name="Repair(s)", value=str(', '.join(airportdetails["repairs"])), inline=True)

        await ctx.send(embed=embed)
    except:

        #/- report error in case of exception
        #   only expected error is an incorrect ICAO

        await ctx.send(":flushed: Failed to fetch Airport Details!! Perhaps an invalid ICAO? :thinking: Try Again... ")

    #/- logging the action into the logs file

    logs(f"\n[{datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] @{author.name} requested for charts for {icao}.\n")




# /* to report the current client version

@client.command()
async def version(ctx):

    await ctx.send(str(f"```{CLIENT_VERSION}```"))




# /* main event loop to run the discord client */

client.run(token)