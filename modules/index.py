'''
"EasyFly" Project by Aaditya Rengarajan
Contact Developer at aadit.xo@gmail.com
or at http://aadityarengarajan.vercel.app/

Open-Source Software. Documented for all viewers.

Aviation Discord Client with multiple features.

Open-Source Software under the Boost Software License 1.0.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
'''

# /*  importing necessary modules */


#/- requests to contact API

import requests

#/- importing environment variables

from os import getenv

#/- importing datetime for current date and time

import datetime

#/- importing BeautifulSoup to find dynamically changing API Base URL

from bs4 import BeautifulSoup



# /* authorizing with API */

# /* fetching dynamically changing API base URL */

VORTEX_API_BASE_URL = "https://api.intellx.co.in/"

API_ACCESS_PERMIT = getenv("VORTEX_ACCESS_PERMIT")

API_KEY = '?key='+str(requests.get(VORTEX_API_BASE_URL+"/keygen"+API_ACCESS_PERMIT).text)


# /* all required modular functions for usage in main application */


def aptname(icao):

    #/- to get airport's name, latitude and longitude given ICAO

    return requests.get(VORTEX_API_BASE_URL+'/commons/airports/name-latitude-longitude/'+str(icao).upper()+API_KEY).json()



def getdist(dpt,arr):

    #/- to find the distance between 2 airports given their ICAOs

    return round(float(requests.get(VORTEX_API_BASE_URL+'/commons/distance/'+str(dpt).upper()+'.'+str(arr).upper()+API_KEY).text))


def icaoparser(fpl):

    #/- to parse an ICAO style flight plan and extract specific details

    fpl = str(fpl).replace(')','').replace('(','').split('-')
    validity = fpl[0]
    if validity=='FPL':
        validity="True"
    else:
        validity="False"
    fplinfo={'validity':validity}
    try:
        callsign = fpl[1].replace('\n','')
        fplinfo.update({'callsign':callsign})
        aircraft = fpl[3].split('/')[0].replace('\n','')
        fplinfo.update({'aircraft':aircraft})
        waketurb = fpl[3].split('/')[1].replace('\n','')
        fplinfo.update({'waketurb':waketurb})
        fromicao = fpl[5][0:4].replace('\n','')
        fplinfo.update({'fromicao':fromicao})
        deptime = fpl[5].replace('\n','').replace(fromicao,'')
        fplinfo.update({'deptime':deptime})
        route = fpl[6].replace(fpl[6].split(' ')[0],'').replace('\n','').strip()
        fplinfo.update({'route':route})
        toicao = fpl[7][0:4].replace('\n','')
        fplinfo.update({'toicao':toicao})
        remarks = fpl[8].replace('\n','').strip()
        fplinfo.update({'remarks':remarks})


        kts=fpl[6].split(' ')[0].split('F')[0].replace('N','')
        fplinfo.update({'speed':str(kts)})
        date = str((datetime.datetime.now().strftime('%H %M'))).replace(' ','')
        alt=fpl[6].split(' ')[0].split('F')[1].replace('F','')[0:3]
        fplinfo.update({"altitude":str(alt)})
        alt= str(alt) + '00'
        enroute = fpl[7][4:].replace('\n','')
        fplinfo.update({'enroute_time':enroute})
        endurance = int(enroute)+100
        endurance = '{num:04d}'.format(num=endurance)
        equipment = fpl[4].split('/')[0].replace('/','').replace('\n','')
        transponder = fpl[4].split('/')[1].replace('/','').replace('\n','')

        vatsprefile=str(f'''https://my.vatsim.net/pilots/flightplan?
callsign={callsign}
&flight_rules=I
&voice_rules=V
&speed={kts}
&departure={fromicao}
&off_block_time={date}
&altitude={alt}
&arrival={toicao}
&alternate=
&enroute_time={enroute}
&fuel_time={endurance}
&route={route.replace(" ","+")}
&raw_remarks={remarks.replace("/","%2F")}
&equipment={equipment}
&wake_category={waketurb}
&aircraft={aircraft}
&transponder={transponder}''').replace('\n','').replace(' ','%20')
        fplinfo.update({'vatsim_prefile':vatsprefile})
    except Exception as e:
        pass
    return fplinfo

#!! SAMPLE FPLINFO
#/- {
#/-   "validity": "True",
#/-   "callsign": "KAC777",
#/-   "aircraft": "B77W",
#/-   "waketurb": "H",
#/-   "fromicao": "OKBK",
#/-   "deptime" : 0545,
#/-   "speed" : "490",
#/-   "altitude" : "330",
#/-   "route": "OKBK SID BOXIK B416 IMDOX UP975 LONOS Y604 LOPOL L703 GEPUT Y604 GODRI L703 GOGRA Y604 OBNAX L703 DEKTA Y604 VELOG L703 KOBOK STAR OBBI",
#/-   "toicao": "OBBI",
#/-   "remarks": "PBN/A1B1C1D1L1O1S2 DOF/201207 REG/KAC777 EET/00/29 OPR/KAC PER/D C/Aaditya Rengarajan VA/GCC VA RMK/TCAS GENERATED BY EASYFLY FOR SIMULATION PURPOSES ONLY"
#/- }



def chgdeptim(fpl,totime):

    #/- to manipulate a flight plan and change the scheduled departure time

    plan = fpl
    fpl = str(fpl).replace(')','').replace('(','').split('-')
    departime = fpl[5].replace('\n','')
    fromicao = fpl[5][0:4].replace('\n','')
    newstuff = f"{fromicao}{totime}"
    return plan.replace(departime,newstuff)


def fplgenner(callsign, frm, to, flight, pic, rmk):

    #/- to generate and return a ICAO type Flight Plan,
    #/- a flight briefing, and a loadsheeet.

    plandetails = requests.get(VORTEX_API_BASE_URL+'/commons/plan/'+str(frm).upper()+'.'+str(to).upper()+'.'+str(flight).upper()+API_KEY).json()

    alt = plandetails[-1].replace("FL","")+"00"
    rte = plandetails[0]

    distance=((getdist(frm,to)))
    distancenm=round((distance/1.852),2)    
    time = float(distancenm)/float(490)

    atsfpl='''(FPL-'''+str(callsign)+'''-IS
    -'''+str(flight.upper())+'''/M-SDE1E2E3FGHIJ2J3J4J5M1RWXY/LB1
    -'''+str(frm.upper())+str((datetime.datetime.now()).strftime('%H%M'))+'''
    -N'''+str(490)+'''F'''+str(alt)+' '+str(((rte.replace(' ',' ')).replace('<b>','')).replace('\n',''))+'''
    -'''+str(to)+str((((datetime.datetime.now())+(datetime.timedelta(hours=float(time))))).strftime('%H%M'))+'''
    -PBN/A1B1C1D1L1O1S2 DOF/'''+str(datetime.datetime.now().strftime('%y%m%d'))+''' REG/'''+str(callsign)+''' EET/'''+str(to.upper())+str(((datetime.datetime.strptime('0000','%H%M'))\
    +(datetime.timedelta(hours=float(time)))).strftime('%H%M'))+''' OPR/'''+str(''.join([c for c in callsign if c.isalpha()]))+''' PER/D C/'''+str(pic)+''' RMK/TCAS '''+rmk+''' GENERATED BY EASYFLY)'''
    atsfpl = str(((atsfpl.replace(' ',' ')).replace('<b>','')).replace('\n','').replace('SID','').replace('STAR','').replace('  ',' ').replace('  ',' '))

    return [str(rte),str(plandetails[1]),str(plandetails[2]),str(atsfpl),str(plandetails[3]),plandetails]


def IMPnotams(icao):
    
    #/- to get important NOTAMs of an airport

    return requests.get(VORTEX_API_BASE_URL+'/commons/important-notams/'+str(icao).upper()+API_KEY).json()

def metar(metar):

    #/- to decode a given metar using the module

    return str(requests.get(VORTEX_API_BASE_URL+'/commons/parse-metar'+API_KEY+'&metar='+str(metar).upper()).text)




def taf(loc):

    #/- to fetch the TAF(s) of a location given ICAO

    return str(requests.get(VORTEX_API_BASE_URL+'/commons/taf/'+loc.upper()+API_KEY).text)

def getmetar(loc):

    #/- to get the METAR of a location given ICAO

    return str(requests.get(VORTEX_API_BASE_URL+'/commons/metar/'+loc.upper()+API_KEY).text)

def getCharts(icao):
    url = 'https://aim-india.aai.aero/eaip-v2-01-2021/index-en-GB.html'
    headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}
    r = requests.get(url,verify=False,headers=headers)
    lst = BeautifulSoup(r.content,'html.parser')
    lnk = lst.find('frame',{'name':'eAISNavigationBase'})['src']
    lnk = 'https://aim-india.aai.aero/eaip-v2-01-2021/'+lnk
    r = requests.get(lnk,verify=False,headers=headers)
    lst = BeautifulSoup(r.content,'html.parser')
    lnk = lst.find('frame',{'name':'eAISNavigation'})['src']
    lnk = 'https://aim-india.aai.aero/eaip-v2-01-2021/'+lnk
    r = requests.get(lnk,verify=False,headers=headers)
    lst = BeautifulSoup(r.content,'html.parser')
    ass = lst.find('a',{'title':icao})
    try:
        return (('https://aim-india.aai.aero/eaip-v2-01-2021/eAIP/'+ass['href']).replace(' ','%20'))
    except:
        return ''

def ALLnotams(icao):
    
    #/- to get all NOTAMS of an airport

    return requests.get(VORTEX_API_BASE_URL+'/commons/notams/'+str(icao).upper()+API_KEY).json()


def phonetic(alphabet):

    # to convert an alphabet into phonetic code

    alphabet = str(alphabet).upper()

    phoneticdict = {"A":"Alpha",
                    "B":"Bravo",
                    "C":"Charlie",
                    "D":"Delta",
                    "E":"Echo",
                    "F":"Foxtrot",
                    "G":"Golf",
                    "H":"Hotel",
                    "I":"India",
                    "J":"Julliet",
                    "K":"Kilo",
                    "L":"Lima",
                    "M":"Mike",
                    "N":"November",
                    "O":"Oscar",
                    "P":"Papa",
                    "Q":"Quebec",
                    "R":"Romeo",
                    "S":"Sierra",
                    "T":"Tango",
                    "U":"Uniform",
                    "V":"Victor",
                    "W":"Whisky",
                    "X":"X-Ray",
                    "Y":"Yankee",
                    "Z":"Zulu",
                    "0":"Zero",
                    "1":"One",
                    "2":"Two",
                    "3":"Three",
                    "4":"Four",
                    "5":"Five",
                    "6":"Six",
                    "7":"Seven",
                    "8":"Eight",
                    "9":"Nine"
                     }
    if len(str(alphabet)) == 1:
        return phoneticdict[str(alphabet)]
    else:
        return ""

def live_VATSIM(loc):

    #/- to fetch the live data of VATSIM

    stations = []

    for station in requests.get(VORTEX_API_BASE_URL+'/live/vatsim'+API_KEY).json():
        if str(loc.upper()) in str(str(station["callsign"]).upper()):
            stations.append(station)

    return stations

def live_IVAO(loc):

    #/- to fetch the live data of IVAO

    stations = []

    for station in requests.get(VORTEX_API_BASE_URL+'/live/ivao'+API_KEY).json():
        if str(loc.upper()) in str(str(station["callsign"]).upper()):
            stations.append(station)

    return stations

def live_PilotEdge(loc):

    #/- to fetch the live data of PilotEdge

    stations = []

    for station in requests.get(VORTEX_API_BASE_URL+'/live/pilotedge'+API_KEY).json():
        if str(loc.upper()) in str(str(station["callsign"]).upper()):
            stations.append(station)

    return stations

def live_all(loc):

    #/- to fetch the live data of IVAO, VATSIM and PilotEdge

    stations = []

    for station in requests.get(VORTEX_API_BASE_URL+'/live/all-networks'+API_KEY).json():
        if str(loc.upper()) in str(str(station["callsign"]).upper()):
            stations.append(station)

    return stations

def live_all_flights():

    #/- to fetch the live data of IVAO, VATSIM and PilotEdge

    return requests.get(VORTEX_API_BASE_URL+'/live/all-networks'+API_KEY).json()

def getCharts(icao):

    #/- to fetch the charts given ICAO

    return str(requests.get(VORTEX_API_BASE_URL+'/commons/charts/'+icao.upper()+API_KEY).text)

def actrwy(icao):

    #/- to fetch active runways at given ICAO

    runways = (requests.get(VORTEX_API_BASE_URL+'/commons/active-runway/'+icao.upper()+API_KEY).json())
    stringified = []
    for runway in runways:
        stringified.append(str(runway))
    return stringified

def closestapt(latitude,longitude):

    #/- to get the nearest airport

    return requests.get(VORTEX_API_BASE_URL+"/closest/name-latitude-longitude"+API_KEY+"&latitude="+str(latitude)+"&longitude="+str(longitude)).json()[0]

def distapt(airport,latitude,longitude):

    #/- to get the nearest airport

    return requests.get(VORTEX_API_BASE_URL+'/commons/point-distance/'+str(airport.upper())+API_KEY+'&latitude='+str(latitude)+"&longitude="+str(longitude)).json()